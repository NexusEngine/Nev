Vector2 :: Kind { mut x, y: I16 }


Block :: Enum {
  Land
  Wall
  Water
  Hole
}

Map :: Kind(size, startup_position, target: Vector2) {
  players: [Ptr[_ActivePlayer]] = []

  mut world_blocks: Ops[[[Block: size.x]: size.y]] {
    set << _block {
      if _blocks.len == size.y & _blocks[0].len == size.x =>
        world_blocks = _blocks
    }
  }
    
  set_block :: (position: Vector2, block: Block) {
    if position.y < size.y & position.x < size.x {
      world_blocks[position.y][position.x] = block
    }
  }

  show_in_window :: => go {
    // code render the map using raylib
  }
}

_ActivePlayer :: Kind {
  @INIT :: (map: mut Map) => map.players << me.ptr
    
  mut abilities = [Enum { Fly, Sweam, SkipWalls }]
  mut is_won = false
  _memory: [[Enum { Unknown, Poked, NotPosible }]]
  play_once :: {
    // algo code
  }
},

Player :: Enum {
    Active: _ActivePlayer
    Idle
}
